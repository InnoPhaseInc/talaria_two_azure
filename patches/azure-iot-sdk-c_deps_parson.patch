diff --git a/parson.c b/parson.c
index 95d97ea..3c9f445 100644
--- a/parson.c
+++ b/parson.c
@@ -37,6 +37,9 @@
 #include <math.h>
 #include <errno.h>
 
+
+
+
 /* Apparently sscanf is not implemented in some "standard" libraries, so don't use it, if you
  * don't have to. */
 #define sscanf THINK_TWICE_ABOUT_USING_SSCANF
@@ -61,6 +64,10 @@
 #define IS_NUMBER_INVALID(x) (((x) * 0.0) != 0.0)
 #endif
 
+//using T2's libc's equivalent functions
+#define free os_free
+#define malloc os_alloc
+
 static JSON_Malloc_Function parson_malloc = malloc;
 static JSON_Free_Function parson_free = free;
 
@@ -845,10 +852,15 @@ static JSON_Value * parse_boolean_value(const char **string) {
 }
 
 static JSON_Value * parse_number_value(const char **string) {
+
     char *end;
     double number = 0;
     errno = 0;
-    number = strtod(*string, &end);
+   
+    //number = strtod(*string, &end);
+    //libc of T2 SDK future Release will support float conversion / strtod.
+    //Till then, use strtol with base 10 OR atol.
+    number = strtol(*string, &end, 10);
     if (errno || !is_decimal(*string, end - *string)) {
         return NULL;
     }
@@ -993,7 +1005,12 @@ static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int le
             if (buf != NULL) {
                 num_buf = buf;
             }
-            written = sprintf(num_buf, FLOAT_FORMAT, num);
+            //written = sprintf(num_buf, FLOAT_FORMAT, num);
+            //T2 sprintf() can take only array as first argument, so, use snprintf() instead.
+            //libc of T2 SDK future Release will support float conversion / snprintf() with support for float.
+            //Till then, lets comment float and just do snprintf() with int (and cast num to int)!
+            written = snprintf(num_buf, 32, "%d", (int)num);
+
             if (written < 0) {
                 return -1;
             }
@@ -1092,7 +1109,11 @@ static int append_string(char *buf, const char *string) {
     if (buf == NULL) {
         return (int)strlen(string);
     }
-    return sprintf(buf, "%s", string);
+    //return sprintf(buf, "%s", string);
+    //T2 sprintf() can take only array as first argument, so, use snprintf() instead.
+    int i;
+    i = (int)strlen(string);
+    return snprintf(buf, i+1, "%s", string);
 }
 
 #undef APPEND_STRING
